template < class NODETYPE >
void List<NODETYPE>::InsertAtFront( const NODETYPE &value )
{
	List<NODETYPE> *newPtr = getNewNode( value );
        if( firstPtr == lastPtr )
	   firstPtr = lastPtr = newPtr;
        else
	   {	
		newPtr -> nextPtr = firstPtr;// данные nextPtr нового узла newPtr получают значение данных nextPtr узла, который пока еще firstPtr
                                             // т.е. теперь newPtr указывает на firstPtr, который вот вот перестанет им быть
		firstPtr = newPtr; // звание firstPtr теперь получает newPtr
	   }
}
template < class NODETYPE >
void List<NODETYPE>::InsertAtBack( const NODETYPE &value )
{
	List<NODETYPE> *newPtr = getNewNode( value );
        if( firstPtr == lastPtr )
	   firstPtr = lastPtr = newPtr;
        else
	   {
                lastPtr -> nextPtr = newPtr; // данные nextPtr узла, который пока еще lastPtr становятся равными newPtr
					     // т.е. теперь lastPtr, который вот вот перестанет им быть newPtr указывает на newPtr
		lastPtr = newPtr;	     // звание lastPtr теперь получает newPtr
	   }
}